{"version":3,"sources":["Prominent.js","serviceWorker.js","index.js","App.js"],"names":["getColorIndex","r","g","b","PV","array","f","o","Object","of","map","d","i","index","call","slice","a","reduce","p","Math","max","apply","PQueue","comparator","classCallCheck","this","contents","sorted","sort","push","undefined","length","pop","VBox","r1","r2","g1","g2","b1","b2","histo","force","_volume","_count_set","j","k","npix","_count","_avg","hval","histoindex","ntot","rsum","gsum","bsum","pixel","gval","bval","rval","CMap","vboxes","vbox1","vbox2","naturalOrder","count","volume","vbox","color","avg","_ref","size","peek","contains","nearest","d1","d2","pColor","sqrt","pow","_ref2","_ref3","color1","color2","sum","lowest","idx","highest","medianCutApply","rw","gw","bw","maxw","copy","total","partialsum","lookaheadsum","forEach","doCut","left","right","dim1","concat","dim2","count2","min","quantize","pixels","maxcolors","Array","getHisto","nColors","pq","rmin","rmax","gmin","gmax","bmin","bmax","vboxFromPixels","iter","lh","target","ncolors","niters","pq2","cmap","Swatch","rgb","population","hsl","yiq","Dynamic","rgbToHsl","toString","_ensureTextColors","CanvasImage","image","canvas","document","createElement","context","getContext","body","appendChild","width","height","drawImage","clearRect","imageData","putImageData","getImageData","parentNode","removeChild","sourceImage","colorCount","quality","TARGET_DARK_LUMA","MAX_DARK_LUMA","MIN_LIGHT_LUMA","TARGET_LIGHT_LUMA","MIN_NORMAL_LUMA","TARGET_NORMAL_LUMA","MAX_NORMAL_LUMA","TARGET_MUTED_SATURATION","MAX_MUTED_SATURATION","TARGET_VIBRANT_SATURATION","MIN_VIBRANT_SATURATION","WEIGHT_SATURATION","WEIGHT_LUMA","WEIGHT_POPULATION","DynamicSwatch","MutedSwatch","DarkDynamicSwatch","DarkMutedSwatch","LightDynamicSwatch","LightMutedSwatch","HighestPopulation","data","pixelCount","getPixelCount","allPixels","offset","_swatches","maxPopulation","findMaxPopulation","generateVarationColors","generateEmptySwatches","removeCanvas","findColorVariation","getHsl","hslToRgb","_arr","from","_i","swatch","getPopulation","targetLuma","minLuma","maxLuma","targetSaturation","minSaturation","maxSaturation","maxValue","_arr2","_i2","sat","luma","isAlreadySelected","value","createComparisonValue","saturation","weightedMean","invertDiff","targetValue","abs","sumWeight","arguments","weight","entries","vibrant","muted","darkDynamic","darkMuted","lightDynamic","lightMuted","LightMuted","filter","_ref4","_ref5","slicedToArray","_ref6","_ref7","h","s","l","hue2rgb","q","t","state","swatches","onerror","onload","_this","_img","setState","src","props","_originalSrc","Image","crossOrigin","_this$props","render","children","react_default","Fragment","React","Component","Boolean","window","location","hostname","match","ReactDOM","Prominent_default","colors","toConsumableArray","getHex","className","style","backgroundImage","alt","name","key","backgroundColor","getTitleTextColor","getBodyTextColor","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAOMA,EAAgB,SAACC,EAAGC,EAAGC,GAAP,OAAcF,GAAM,KAAiBC,GAL3C,GAK2DC,GAErEC,mGACOC,EAAOC,GAChB,IAAMC,EAAIC,OAAOC,GAAG,MACpB,OAAOH,EAAID,EAAMK,IAAI,SAACC,EAAGC,GAEvB,OADAL,EAAEM,MAAQD,EACHN,EAAEQ,KAAKP,EAAGI,KACdN,EAAMU,6CAGOC,EAAGb,GACrB,OAAQa,EAAIb,GAAM,EAAMa,EAAIb,EAAK,EAAI,8BAG5BE,EAAOC,GAChB,IAAMC,EAAIC,OAAOC,GAAG,MACpB,OAAOJ,EAAMY,OAAOX,EAAI,SAACY,EAAGP,EAAGC,GAE7B,OADAL,EAAEM,MAAQD,EACHM,EAAIZ,EAAEQ,KAAKP,EAAGI,IACnB,SAACO,EAAGP,GAAJ,OAAUO,EAAIP,GAAG,+BAGZN,EAAOC,GAChB,OAAOa,KAAKC,IAAIC,MAAM,KAAMf,EAAIF,EAAGM,IAAIL,EAAOC,GAAKD,YAIjDiB,aACJ,SAAAA,EAAYC,GAAaf,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAAH,GACvBG,KAAKF,WAAaA,EAClBE,KAAKC,SAAW,GAChBD,KAAKE,QAAS,qDAIdF,KAAKC,SAASE,KAAKH,KAAKF,YACxBE,KAAKE,QAAS,+BAGXpB,GACHkB,KAAKC,SAASG,KAAKtB,GACnBkB,KAAKE,QAAS,+BAGXd,GAMH,OALKY,KAAKE,QAAQF,KAAKG,YACTE,IAAVjB,IACFA,EAAQY,KAAKC,SAASK,OAAS,GAG1BN,KAAKC,SAASb,iCAKrB,OADKY,KAAKE,QAAQF,KAAKG,OAChBH,KAAKC,SAASM,qCAIrB,OAAOP,KAAKC,SAASK,mCAGnBzB,GACF,OAAOmB,KAAKC,SAAShB,IAAIJ,mCAKzB,OADKmB,KAAKE,QAAQF,KAAKG,OAChBH,KAAKC,kBAIVO,aACJ,SAAAA,EAAYC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GAAQhC,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAAQ,GAC1CR,KAAKS,GAAKA,EACVT,KAAKU,GAAKA,EACVV,KAAKW,GAAKA,EACVX,KAAKY,GAAKA,EACVZ,KAAKa,GAAKA,EACVb,KAAKc,GAAKA,EACVd,KAAKe,MAAQA,qDAGRC,GASL,OARKhB,KAAKiB,UAAWD,IACnBhB,KAAKiB,SACFjB,KAAKU,GAAKV,KAAKS,GAAK,IACpBT,KAAKY,GAAKZ,KAAKW,GAAK,IACpBX,KAAKc,GAAKd,KAAKa,GAAK,IAIlBb,KAAKiB,sCAGRD,GACJ,IAAKhB,KAAKkB,YAAcF,EAAO,CAC7B,IACI7B,EACAgC,EACAC,EACAhC,EAJAiC,EAAO,EAMX,IAAKlC,EAAIa,KAAKS,GAAItB,GAAKa,KAAKU,GAAIvB,IAC9B,IAAKgC,EAAInB,KAAKW,GAAIQ,GAAKnB,KAAKY,GAAIO,IAC9B,IAAKC,EAAIpB,KAAKa,GAAIO,GAAKpB,KAAKc,GAAIM,IAC9BhC,EAAQb,EAAcY,EAAGgC,EAAGC,GAC5BC,GAASrB,KAAKe,MAAM3B,IAAU,EAKpCY,KAAKsB,OAASD,EACdrB,KAAKkB,YAAa,EAGpB,OAAOlB,KAAKsB,sCAIZ,OAAO,IAAId,EACTR,KAAKS,GAAIT,KAAKU,GACdV,KAAKW,GAAIX,KAAKY,GACdZ,KAAKa,GAAIb,KAAKc,GACdd,KAAKe,mCAILC,GACF,IAAKhB,KAAKuB,MAAQP,EAAO,CACvB,IAKIQ,EACArC,EACAgC,EACAC,EACAK,EATAC,EAAO,EAEPC,EAAO,EACPC,EAAO,EACPC,EAAO,EAOX,IAAK1C,EAAIa,KAAKS,GAAItB,GAAKa,KAAKU,GAAIvB,IAC9B,IAAKgC,EAAInB,KAAKW,GAAIQ,GAAKnB,KAAKY,GAAIO,IAC9B,IAAKC,EAAIpB,KAAKa,GAAIO,GAAKpB,KAAKc,GAAIM,IAC9BK,EAAalD,EAAcY,EAAGgC,EAAGC,GAEjCM,GADAF,EAAOxB,KAAKe,MAAMU,IAAe,EAEjCE,GAASH,GAAQrC,EAAI,IAhBd,EAiBPyC,GAASJ,GAAQL,EAAI,IAjBd,EAkBPU,GAASL,GAAQJ,EAAI,IAlBd,EAwBXpB,KAAKuB,KADHG,EACU,IACPC,EAAOD,MACPE,EAAOF,MACPG,EAAOH,IAGA,GA9BD,GA+BC1B,KAAKS,GAAKT,KAAKU,GAAK,GAAK,MA/B1B,GAgCEV,KAAKW,GAAKX,KAAKY,GAAK,GAAK,MAhC3B,GAiCEZ,KAAKa,GAAKb,KAAKc,GAAK,GAAK,IAK1C,OAAOd,KAAKuB,sCAGLO,GACP,IAAIC,EACAC,EAEEC,EAAOH,EAAM,IArLR,EA0LX,OAHAC,EAAOD,EAAM,IAvLF,EAwLXE,EAAOF,EAAM,IAxLF,EA2LTG,GAAQjC,KAAKS,IACVwB,GAAQjC,KAAKU,IACbqB,GAAQ/B,KAAKW,IACboB,GAAQ/B,KAAKY,IACboB,GAAQhC,KAAKa,IACbmB,GAAQhC,KAAKc,YAKhBoB,aACJ,SAAAA,IAAenD,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAAkC,GACblC,KAAKmC,OAAS,IAAItC,EAAO,SAACuC,EAAOC,GAAR,OAAkB1D,EACxC2D,aACCF,EAAMG,QAAUH,EAAMI,SACtBH,EAAME,QAAUF,EAAMG,6DAIvBC,GACHzC,KAAKmC,OAAO/B,KAAK,CACfqC,OACAC,MAAOD,EAAKE,0CAKd,OAAO3C,KAAKmC,OAAOlD,IAAI,SAAA2D,GAAA,OAAAA,EACrBF,uCAKF,OAAO1C,KAAKmC,OAAOU,mCAGjBH,GACF,IAAK,IAAIvD,EAAI,EAAGA,EAAIa,KAAKmC,OAAOU,OAAQ1D,IACtC,GAAIa,KAAKmC,OAAOW,KAAK3D,GAAGsD,KAAKM,SAASL,GACpC,OAAO1C,KAAKmC,OAAOW,KAAK3D,GAAGuD,MAI/B,OAAO1C,KAAKgD,QAAQN,mCAGdA,GAKN,IAJA,IAAIO,EACAC,EACAC,EAEKhE,EAAI,EAAGA,EAAIa,KAAKmC,OAAOU,OAAQ1D,MACtC+D,EAAKxD,KAAK0D,KACR1D,KAAA2D,IAACX,EAAM,GAAK1C,KAAKmC,OAAOW,KAAK3D,GAAGuD,MAAM,GAAO,GAA7ChD,KAAA2D,IACCX,EAAM,GAAK1C,KAAKmC,OAAOW,KAAK3D,GAAGuD,MAAM,GAAO,GAD7ChD,KAAA2D,IAECX,EAAM,GAAK1C,KAAKmC,OAAOW,KAAK3D,GAAGuD,MAAM,GAAO,KAEtCO,QAAa5C,IAAP4C,KACbA,EAAKC,EACLC,EAASnD,KAAKmC,OAAOW,KAAK3D,GAAGuD,OAIjC,OAAOS,oCAIPnD,KAAKmC,OAAOhC,KAAK,SAAAmD,EAAAC,GAAA,IACfC,EADeF,EACfE,OAEAC,EAHeF,EAGfE,OAHe,OAIX9E,EAAG2D,aACP3D,EAAG+E,IAAIF,GACP7E,EAAG+E,IAAID,MAGT,IAAME,EAAS3D,KAAKmC,OAAO,GAAGO,MAE1BiB,EAAO,GAAK,GAAKA,EAAO,GAAK,GAAKA,EAAO,GAAK,IAChD3D,KAAKmC,OAAO,GAAGO,MAAQ,CAAC,EAAG,EAAG,IAGhC,IAAMkB,EAAM5D,KAAKmC,OAAO7B,OAAS,EAC3BuD,EAAU7D,KAAKmC,OAAOyB,GAAKlB,MAE7BmB,EAAQ,GAAK,KAAOA,EAAQ,GAAK,KAAOA,EAAQ,GAAK,MACvD7D,KAAKmC,OAAOyB,GAAKlB,MAAQ,CAAC,IAAK,IAAK,eAkDpCoB,EAAiB,SAAC/C,EAAO0B,GAC7B,GAAKA,EAAKF,QAAV,CAEA,IAAMwB,EAAKtB,EAAK/B,GAAK+B,EAAKhC,GAAK,EACzBuD,EAAKvB,EAAK7B,GAAK6B,EAAK9B,GAAK,EACzBsD,EAAKxB,EAAK3B,GAAK2B,EAAK5B,GAAK,EACzBqD,EAAOvF,EAAGgB,IAAI,CAACoE,EAAIC,EAAIC,IAE7B,GAAqB,IAAjBxB,EAAKF,QAAe,MAAO,CAACE,EAAK0B,QAErC,IAIIhF,EACAgC,EACAC,EACAsC,EAPAU,EAAQ,EAENC,EAAa,GACbC,EAAe,GAOrB,GAAIJ,IAASH,EACX,IAAK5E,EAAIsD,EAAKhC,GAAItB,GAAKsD,EAAK/B,GAAIvB,IAAK,CAEnC,IADAuE,EAAM,EACDvC,EAAIsB,EAAK9B,GAAIQ,GAAKsB,EAAK7B,GAAIO,IAC9B,IAAKC,EAAIqB,EAAK5B,GAAIO,GAAKqB,EAAK3B,GAAIM,IAE9BsC,GAAQ3C,EADAxC,EAAcY,EAAGgC,EAAGC,KACJ,EAG5BgD,GAASV,EACTW,EAAWlF,GAAKiF,OAEb,GAAIF,IAASF,EAClB,IAAK7E,EAAIsD,EAAK9B,GAAIxB,GAAKsD,EAAK7B,GAAIzB,IAAK,CAEnC,IADAuE,EAAM,EACDvC,EAAIsB,EAAKhC,GAAIU,GAAKsB,EAAK/B,GAAIS,IAC9B,IAAKC,EAAIqB,EAAK5B,GAAIO,GAAKqB,EAAK3B,GAAIM,IAE9BsC,GAAQ3C,EADAxC,EAAc4C,EAAGhC,EAAGiC,KACJ,EAG5BgD,GAASV,EACTW,EAAWlF,GAAKiF,OAGlB,IAAKjF,EAAIsD,EAAK5B,GAAI1B,GAAKsD,EAAK3B,GAAI3B,IAAK,CAEnC,IADAuE,EAAM,EACDvC,EAAIsB,EAAKhC,GAAIU,GAAKsB,EAAK/B,GAAIS,IAC9B,IAAKC,EAAIqB,EAAK9B,GAAIS,GAAKqB,EAAK7B,GAAIQ,IAE9BsC,GAAQ3C,EADAxC,EAAc4C,EAAGC,EAAGjC,KACJ,EAG5BiF,GAASV,EACTW,EAAWlF,GAAKiF,EAIpBC,EAAWE,QAAQ,SAACrF,EAAGC,GACrBmF,EAAanF,GAAKiF,EAAQlF,IAG5B,IAAMsF,EAAQ,SAAC9B,GACb,IAEI+B,EACAC,EACAtC,EACAC,EACAa,EANEyB,EAAI,GAAAC,OAAMlC,EAAN,KACJmC,EAAI,GAAAD,OAAMlC,EAAN,KAMNoC,EAAS,EAEb,IAAK3F,EAAIsD,EAAKkC,GAAOxF,GAAKsD,EAAKoC,GAAO1F,IACpC,GAAIkF,EAAWlF,GAAKiF,EAAQ,EAAG,CAa7B,IAZAhC,EAAQK,EAAK0B,OACb9B,EAAQI,EAAK0B,OAMXjB,GAJFuB,EAAOtF,EAAIsD,EAAKkC,MAChBD,EAAQjC,EAAKoC,GAAQ1F,GAGdO,KAAKqF,IAAItC,EAAKoC,GAAQ,KAAM1F,EAAIuF,EAAQ,IAExChF,KAAKC,IAAI8C,EAAKkC,MAAUxF,EAAI,EAAIsF,EAAO,KAGtCJ,EAAWnB,IAAKA,IAExB,IADA4B,EAASR,EAAapB,IACd4B,GAAUT,EAAWnB,EAAK,IAAI4B,EAASR,IAAepB,GAG9D,OAFAd,EAAMyC,GAAQ3B,EACdb,EAAMsC,GAAQvC,EAAMyC,GAAQ,EACrB,CAACzC,EAAOC,KAKrB,OACImC,EADIN,IAASH,EACP,IACLG,IAASF,EACF,IACA,OAGRgB,EAAW,SAACC,EAAQC,GACxB,IAAKD,EAAO3E,QAAU4E,EAAY,GAAKA,EAAY,IACjD,OAAO,EAGT,IAAMnE,EAzJS,SAACkE,GAChB,IAEI7F,EACA6C,EACAF,EACAC,EAJEjB,EAAQ,IAAIoE,MADA,OAelB,OARAF,EAAOV,QAAQ,SAAAzC,GACbG,EAAOH,EAAM,IA/RF,EAgSXC,EAAOD,EAAM,IAhSF,EAiSXE,EAAOF,EAAM,IAjSF,EAkSX1C,EAAQb,EAAc0D,EAAMF,EAAMC,GAClCjB,EAAM3B,IAAU2B,EAAM3B,IAAU,GAAK,IAGhC2B,EAyIOqE,CAASH,GAEnBI,EAAU,EACdtE,EAAMwD,QAAQ,kBAAMc,MAMpB,IAAMC,EAAK,IAAIzF,EAAO,SAACN,EAAGb,GAAJ,OAAUC,EAAG2D,aAAa/C,EAAEgD,QAAS7D,EAAE6D,WAC7D+C,EAAGlF,KAhJkB,SAAC6E,EAAQlE,GAC9B,IAMIkB,EACAF,EACAC,EARAuD,EAAO,IACPC,EAAO,EACPC,EAAO,IACPC,EAAO,EACPC,EAAO,IACPC,EAAO,EAiBX,OAZAX,EAAOV,QAAQ,SAAAzC,GACbG,EAAOH,EAAM,IArTF,EAsTXC,EAAOD,EAAM,IAtTF,EAuTXE,EAAOF,EAAM,IAvTF,EAwTPG,EAAOsD,EAAMA,EAAOtD,EACfA,EAAOuD,IAAMA,EAAOvD,GACzBF,EAAO0D,EAAMA,EAAO1D,EACfA,EAAO2D,IAAMA,EAAO3D,GACzBC,EAAO2D,EAAMA,EAAO3D,EACfA,EAAO4D,IAAMA,EAAO5D,KAGxB,IAAIxB,EAAK+E,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,EAAM7E,GAyH5C8E,CAAeZ,EAAQlE,IAE/B,IAAM+E,EAAO,SAACC,EAAIC,GAKhB,IAJA,IAEIvD,EAFAwD,EAAU,EACVC,EAAS,EAGNA,EA/bW,KAichB,IADAzD,EAAOsD,EAAGxF,OACAgC,QAAV,CAMA,IAAMJ,EAAS2B,EAAe/C,EAAO0B,GAE/BL,EAAQD,EAAO,GACfE,EAAQF,EAAO,GAErB,IAAKC,EACH,OAUF,GAPA2D,EAAG3F,KAAKgC,GAEJC,IACF0D,EAAG3F,KAAKiC,GACR4D,KAGEA,GAAWD,EAAQ,OAEvB,GAAIE,IAzdY,IA0dd,YAxBAH,EAAG3F,KAAKqC,GACRyD,KA4BNJ,EAAKR,EA9doB,IA8dKJ,GAO9B,IALA,IAAMiB,EAAM,IAAItG,EAAO,SAACN,EAAGb,GAAJ,OAAUC,EAAG2D,aAClC/C,EAAEgD,QAAUhD,EAAEiD,SACd9D,EAAE6D,QAAU7D,EAAE8D,YAGT8C,EAAGzC,QACRsD,EAAI/F,KAAKkF,EAAG/E,OAGduF,EAAKK,EAAKjB,EAAYiB,EAAItD,QAI1B,IAFA,IAAMuD,EAAO,IAAIlE,EAEViE,EAAItD,QACTuD,EAAKhG,KAAK+F,EAAI5F,OAGhB,OAAO6F,GAIHC,aACJ,SAAAA,EAAYC,EAAKC,GAAaxH,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAAqG,GAC5BrG,KAAKwG,SAAMnG,EACXL,KAAKyG,IAAM,EACXzG,KAAKsG,IAAMA,EACXtG,KAAKuG,WAAaA,uDAIlB,OAAKvG,KAAKwG,IAGDxG,KAAKwG,IAFLxG,KAAKwG,IAAME,EAAQC,SAAS3G,KAAKsG,IAAI,GAAItG,KAAKsG,IAAI,GAAItG,KAAKsG,IAAI,4CAOxE,OAAOtG,KAAKuG,4CAIZ,OAAOvG,KAAKsG,qCAIZ,UAAA1B,SAAa,GAAK,KAAO5E,KAAKsG,IAAI,IAAM,KAAOtG,KAAKsG,IAAI,IAAM,GAAKtG,KAAKsG,IAAI,IAAIM,SAAS,IAAItH,MAAM,EAAG,gDAKtG,OADAU,KAAK6G,oBACD7G,KAAKyG,IAAM,IACN,OAEA,kDAMT,OADAzG,KAAK6G,oBACD7G,KAAKyG,IAAM,IACN,OAEA,mDAKT,IAAKzG,KAAKyG,IACR,OAAOzG,KAAKyG,KAAsB,IAAdzG,KAAKsG,IAAI,GAA2B,IAAdtG,KAAKsG,IAAI,GAA2B,IAAdtG,KAAKsG,IAAI,IAAa,aAKtFQ,aACJ,SAAAA,EAAYC,GAAQhI,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAA8G,GAClB9G,KAAKgH,OAASC,SAASC,cAAc,UACrClH,KAAKmH,QAAUnH,KAAKgH,OAAOI,WAAW,MAEtCH,SAASI,KAAKC,YAAYtH,KAAKgH,QAE/BhH,KAAKuH,MAASvH,KAAKgH,OAAOO,MAAQR,EAAMQ,MACxCvH,KAAKwH,OAAUxH,KAAKgH,OAAOQ,OAAST,EAAMS,OAE1CxH,KAAKmH,QAAQM,UAAUV,EAAO,EAAG,EAAG/G,KAAKuH,MAAOvH,KAAKwH,4DAIrD,OAAOxH,KAAKmH,QAAQO,UAAU,EAAG,EAAG1H,KAAKuH,MAAOvH,KAAKwH,uCAGhDG,GACL,OAAO3H,KAAKmH,QAAQS,aAAaD,EAAW,EAAG,2CAI/C,OAAO3H,KAAKuH,MAAQvH,KAAKwH,8CAIzB,OAAOxH,KAAKmH,QAAQU,aAAa,EAAG,EAAG7H,KAAKuH,MAAOvH,KAAKwH,+CAIxD,OAAOxH,KAAKgH,OAAOc,WAAWC,YAAY/H,KAAKgH,iBAK7CN,aACJ,SAAAA,EAAYsB,EAAaC,EAAYC,GAAUnJ,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAA0G,GAC7C1G,KAAKmI,iBAAmB,IACxBnI,KAAKoI,cAAgB,IACrBpI,KAAKqI,eAAiB,IACtBrI,KAAKsI,kBAAoB,IAEzBtI,KAAKuI,gBAAkB,GACvBvI,KAAKwI,mBAAqB,GAC1BxI,KAAKyI,gBAAkB,GAEvBzI,KAAK0I,wBAA0B,GAC/B1I,KAAK2I,qBAAuB,GAE5B3I,KAAK4I,0BAA4B,EACjC5I,KAAK6I,uBAAyB,IAE9B7I,KAAK8I,kBAAoB,EACzB9I,KAAK+I,YAAc,EACnB/I,KAAKgJ,kBAAoB,EAEzBhJ,KAAKiJ,mBAAgB5I,EACrBL,KAAKkJ,iBAAc7I,EACnBL,KAAKmJ,uBAAoB9I,EACzBL,KAAKoJ,qBAAkB/I,EACvBL,KAAKqJ,wBAAqBhJ,EAC1BL,KAAKsJ,sBAAmBjJ,EAExBL,KAAKuJ,kBAAoB,EAEC,qBAAftB,IAA4BA,EAAa,IAC7B,qBAAZC,IAAyBA,EAAU,GAE9C,IAAMnB,EAAQ,IAAID,EAAYkB,GAE9B,IAOE,IANA,IACM/C,EADY8B,EAAMc,eACC2B,KACnBC,EAAa1C,EAAM2C,gBAEnBC,EAAY,GACdxK,EAAI,EACDA,EAAIsK,GAAY,CACrB,IAAMG,EAAa,EAAJzK,EACTX,EAAIyG,EAAO2E,EAAS,GACpBnL,EAAIwG,EAAO2E,EAAS,GACpBlL,EAAIuG,EAAO2E,EAAS,GAChB3E,EAAO2E,EAAS,IAEjB,MACApL,EAAI,KAASC,EAAI,KAASC,EAAI,KACnCiL,EAAUvJ,KAAK,CAAC5B,EAAGC,EAAGC,KAI1BS,GAAQ+I,EAGV,IAAM9B,EAAOpB,EAAS2E,EAAW1B,GACjCjI,KAAK6J,UAAYzD,EAAKjE,OAAOlD,IAAI,SAAAwD,GAAI,OAAI,IAAI4D,EAAO5D,EAAKC,MAAOD,EAAKA,KAAKF,WAC1EvC,KAAK8J,cAAgB9J,KAAK+J,kBAC1B/J,KAAKgK,yBACLhK,KAAKiK,wBA3BP,QA6BElD,EAAMmD,qFAkDR,OA7CAlK,KAAKiJ,cAAgBjJ,KAAKmK,mBACxBnK,KAAKwI,mBACLxI,KAAKuI,gBACLvI,KAAKyI,gBACLzI,KAAK4I,0BACL5I,KAAK6I,uBACL,GAGF7I,KAAKqJ,mBAAqBrJ,KAAKmK,mBAC7BnK,KAAKsI,kBACLtI,KAAKqI,eACL,EACArI,KAAK4I,0BACL5I,KAAK6I,uBACL,GAGF7I,KAAKmJ,kBAAoBnJ,KAAKmK,mBAC5BnK,KAAKmI,iBACL,EACAnI,KAAKoI,cACLpI,KAAK4I,0BACL5I,KAAK6I,uBACL,GAGF7I,KAAKkJ,YAAclJ,KAAKmK,mBACtBnK,KAAKwI,mBACLxI,KAAKuI,gBACLvI,KAAKyI,gBACLzI,KAAK0I,wBACL,EACA1I,KAAK2I,sBAGP3I,KAAKsJ,iBAAmBtJ,KAAKmK,mBAC3BnK,KAAKsI,kBACLtI,KAAKqI,eACL,EACArI,KAAK0I,wBACL,EACA1I,KAAK2I,sBAGA3I,KAAKoJ,gBAAkBpJ,KAAKmK,mBACjCnK,KAAKmI,iBACL,EACAnI,KAAKoI,cACLpI,KAAK0I,wBACL,EACA1I,KAAK2I,sEAKP,IAAInC,EASJ,QAR2BnG,IAAvBL,KAAKiJ,oBACwB5I,IAA3BL,KAAKmJ,qBACP3C,EAAMxG,KAAKmJ,kBAAkBiB,UACzB,GAAKpK,KAAKwI,mBACdxI,KAAKiJ,cAAgB,IAAI5C,EAAOK,EAAQ2D,SAAS7D,EAAI,GAAIA,EAAI,GAAIA,EAAI,IAAK,SAI/CnG,IAA3BL,KAAKmJ,wBACoB9I,IAAvBL,KAAKiJ,cAGP,OAFAzC,EAAMxG,KAAKiJ,cAAcmB,UACrB,GAAKpK,KAAKmI,iBACPnI,KAAKmJ,kBAAoB,IAAI9C,EAAOK,EAAQ2D,SAAS7D,EAAI,GAAIA,EAAI,GAAIA,EAAI,IAAK,+CAQzF,IAFA,IAAID,EAAa,EADC+D,EAGCnF,MAAMoF,KAAKvK,KAAK6J,WAAnCW,EAAA,EAAAA,EAAAF,EAAAhK,OAAAkK,IAA+C,CAA1C,IAAIC,EAAMH,EAAAE,GACbjE,EAAa7G,KAAKC,IAAI4G,EAAYkE,EAAOC,iBAG3C,OAAOnE,6CAGUoE,EAAYC,EAASC,EAASC,EAAkBC,EAAeC,GAIhF,IAHA,IAAIrL,OAAMU,EACN4K,EAAW,EAFgFC,EAI5E/F,MAAMoF,KAAKvK,KAAK6J,WAAnCsB,EAAA,EAAAA,EAAAD,EAAA5K,OAAA6K,IAA+C,CAA1C,IAAIV,EAAMS,EAAAC,GACPC,EAAMX,EAAOL,SAAS,GACtBiB,EAAOZ,EAAOL,SAAS,GAE7B,GAAKgB,GAAOL,GAAmBK,GAAOJ,GACnCK,GAAQT,GAAaS,GAAQR,IAC7B7K,KAAKsL,kBAAkBb,GAAS,CACjC,IAAMc,EAAQvL,KAAKwL,sBAAsBJ,EAAKN,EAAkBO,EAAMV,EACpEF,EAAOC,gBAAiB1K,KAAKuJ,yBAClBlJ,IAARV,GAAuB4L,EAAQN,KAClCtL,EAAM8K,EACNQ,EAAWM,IAKjB,OAAO5L,gDAGa8L,EAAYX,EAAkBO,EAAMV,EAAYpE,EAAYuD,GAChF,OAAO9J,KAAK0L,aACV1L,KAAK2L,WAAWF,EAAYX,GAAmB9K,KAAK8I,kBACpD9I,KAAK2L,WAAWN,EAAMV,GAAa3K,KAAK+I,YACxCxC,EAAauD,EAAe9J,KAAKgJ,sDAI1BuC,EAAOK,GAChB,OAAO,EAAIlM,KAAKmM,IAAIN,EAAQK,0CAO5B,IAHA,IAAIlI,EAAM,EACNoI,EAAY,EACZ3M,EAAI,EACDA,EAAI4M,UAAOzL,QAAQ,CACxB,IAAMiL,EAAepM,EAAV,GAAA4M,UAAAzL,QAAUnB,OAAVkB,EAAA0L,UAAU5M,GACf6M,EAAgB7M,EAAI,EAAd,GAAA4M,UAAAzL,QAAUnB,EAAI,OAAdkB,EAAA0L,UAAU5M,EAAI,GAC1BuE,GAAO6H,EAAQS,EACfF,GAAaE,EACb7M,GAAK,EAEP,OAAOuE,EAAMoI,qCAIb,OAAO/M,OAAOkN,QAAQ,CACpBC,QAASlM,KAAKiJ,cACdkD,MAAOnM,KAAKkJ,YACZkD,YAAapM,KAAKmJ,kBAClBkD,UAAWrM,KAAKoJ,gBAChBkD,aAActM,KAAKqJ,mBACnBkD,WAAYvM,KAAKwM,aAElBC,OAAO,SAAAC,GAAA,IAAAC,EAAA5N,OAAA6N,EAAA,EAAA7N,CAAA2N,EAAA,GAAQnB,GAARoB,EAAA,GAAAA,EAAA,WAA+B,OAAVpB,QAA8BlL,IAAVkL,IAChDtM,IAAI,SAAA4N,GAAA,IAAAC,EAAA/N,OAAA6N,EAAA,EAAA7N,CAAA8N,EAAA,SAAmB,CAAnBC,EAAA,GAAAA,EAAA,gDAIWrC,GAChB,OAAQzK,KAAKiJ,gBAAkBwB,GAAYzK,KAAKmJ,oBAAsBsB,GACnEzK,KAAKqJ,qBAAuBoB,GAAYzK,KAAKkJ,cAAgBuB,GAC7DzK,KAAKoJ,kBAAoBqB,GAAYzK,KAAKsJ,mBAAqBmB,qCAGpDjM,EAAGC,EAAGC,GACpBF,GAAK,IACLC,GAAK,IACLC,GAAK,IAEL,IAAMiB,EAAMD,KAAKC,IAAInB,EAAGC,EAAGC,GACrBqG,EAAMrF,KAAKqF,IAAIvG,EAAGC,EAAGC,GAEvBqO,OAAI1M,EACJ2M,OAAI3M,EAEF4M,GAAKtN,EAAMoF,GAAO,EAExB,GAAIpF,IAAQoF,EACVgI,EAAKC,EAAI,MACJ,CACL,IAAM9N,EAAIS,EAAMoF,EAIhB,OAFAiI,EAAIC,EAAI,GAAM/N,GAAK,EAAIS,EAAMoF,GAAO7F,GAAKS,EAAMoF,GAEvCpF,GACN,KAAKnB,EAAGuO,GAAMtO,EAAIC,GAAKQ,GAAMT,EAAIC,EAAI,EAAI,GAAI,MAC7C,KAAKD,EAAGsO,GAAMrO,EAAIF,GAAKU,EAAK,EAAG,MAC/B,KAAKR,EAAGqO,GAAMvO,EAAIC,GAAKS,EAAK,EAI9B6N,GAAK,EAGP,MAAO,CAACA,EAAGC,EAAGC,oCAGAF,EAAGC,EAAGC,GACpB,IAAIzO,OAAI6B,EACJ5B,OAAI4B,EACJ3B,OAAI2B,EAEF6M,EAAU,SAACzN,EAAG0N,EAAGC,GAGrB,OAFIA,EAAI,IAAGA,GAAK,GACZA,EAAI,IAAGA,GAAK,GACZA,EAAK,EAAI,EAAW3N,EAAe,GAAT0N,EAAI1N,GAAS2N,EACvCA,EAAK,GAAeD,EACpBC,EAAK,EAAI,EAAW3N,GAAM0N,EAAI1N,IAAO,EAAI,EAAK2N,GAAK,EAEhD3N,GAGT,GAAU,IAANuN,EACFxO,EAAKC,EAAKC,EAAIuO,MACT,CACL,IAAME,EAAIF,EAAI,GAAMA,GAAK,EAAID,GAAMC,EAAID,EAAMC,EAAID,EAC3CvN,EAAK,EAAIwN,EAAKE,EACpB3O,EAAI0O,EAAQzN,EAAG0N,EAAGJ,EAAK,EAAI,GAC3BtO,EAAIyO,EAAQzN,EAAG0N,EAAGJ,GAClBrO,EAAIwO,EAAQzN,EAAG0N,EAAGJ,EAAK,EAAI,GAG7B,MAAO,CACD,IAAJvO,EACI,IAAJC,EACI,IAAJC,yNAMJ2O,MAAQ,CACNC,cAAUjN,KAaZkN,QAAU,eAEVC,OAAS,WACP,IACMF,EADU,IAAI5G,EAAQ+G,EAAKC,MACRJ,WAEzBG,EAAKE,SAAS,CACZL,iGAhBF,IAAMM,EAAM5N,KAAK6N,MAAM9G,MACvB/G,KAAK8N,aAAeF,EACpB5N,KAAK0N,KAAO,IAAIK,MAChB/N,KAAK0N,KAAKF,OAASxN,KAAKwN,OACxBxN,KAAK0N,KAAKH,QAAUvN,KAAKuN,QACzBvN,KAAK0N,KAAKM,aAAc,EACxBhO,KAAK0N,KAAKE,IAAMA,mCAcT,IAAAK,EAC2BjO,KAAK6N,MAAhCK,EADAD,EACAC,OAAQC,EADRF,EACQE,SAAUpH,EADlBkH,EACkBlH,MAClBuG,EAAYtN,KAAKqN,MAAjBC,SAEP,OACEc,EAAA7O,EAAA2H,cAACkH,EAAA7O,EAAM8O,SAAP,KACyB,oBAAbF,GAA4Bb,EAClCa,EACEA,EAAS,CAACb,WAAUvG,UACpBoH,EACFD,EACEA,EAAO,CAACZ,WAAUvG,UAClBmH,UAtCeI,IAAMC,iBCt2BfC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASX,OAAOE,EAAA7O,EAAA2H,cCAD,kBACbkH,EAAA7O,EAAA2H,cAAC4H,EAAD,CAAW/H,MAHC,gGAIT,SAAAnE,GAAuB,IAArB0K,EAAqB1K,EAArB0K,SAAUvG,EAAWnE,EAAXmE,MAELgI,EAAShQ,OAAAiQ,EAAA,EAAAjQ,CAAIuO,GAAUrO,IAAI,SAAAqE,GAAA,IAAAC,EAAAxE,OAAA6N,EAAA,EAAA7N,CAAAuE,EAAA,UAAAC,EAAA,GAAAA,EAAA,GAA2B0L,WAE5D,OACEb,EAAA7O,EAAA2H,cAAA,OAAKgI,UAAU,OAEbd,EAAA7O,EAAA2H,cAAA,OAAKgI,UAAU,YAAYC,MAAO,CAChCC,gBAAe,iDAAAxK,OAAmDmK,EAAO,GAA1D,SAAAnK,OAAoEmK,EAAO,GAA3E,YAEfX,EAAA7O,EAAA2H,cAAA,OAAK0G,IAAK7G,EAAOmI,UAAU,WAAWG,IAAI,KAC1CjB,EAAA7O,EAAA2H,cAAA,sBACAkH,EAAA7O,EAAA2H,cAAA,qDAGFkH,EAAA7O,EAAA2H,cAAA,UAAQgI,UAAU,cACfnQ,OAAAiQ,EAAA,EAAAjQ,CAAIuO,GAAUrO,IAAI,SAAAyN,EAAiBtN,GAAjB,IAAAuN,EAAA5N,OAAA6N,EAAA,EAAA7N,CAAA2N,EAAA,GAAE4C,EAAF3C,EAAA,GAAQlC,EAARkC,EAAA,UACjByB,EAAA7O,EAAA2H,cAAA,OAAKgI,UAAU,YAAYK,IAAKnQ,EAAO+P,MAAO,CAACK,gBAAiB/E,EAAOwE,WACrEb,EAAA7O,EAAA2H,cAAA,OAAK0G,IAAK7G,EAAOmI,UAAU,WAAWG,IAAI,KAE1CjB,EAAA7O,EAAA2H,cAAA,MAAIiI,MAAO,CAACzM,MAAO+H,EAAOgF,sBACvBH,GAGHlB,EAAA7O,EAAA2H,cAAA,KAAGiI,MAAO,CAACzM,MAAO+H,EAAOiF,qBAAzB,oED1BA,MAASzI,SAAS0I,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.93bcb6e8.chunk.js","sourcesContent":["import React from 'react';\n\nconst sigbits = 5;\nconst rshift = 8 - sigbits;\nconst maxIterations = 1000;\nconst fractByPopulations = 0.75;\n\nconst getColorIndex = (r, g, b) => (r << (2 * sigbits)) + (g << sigbits) + b;\n\nclass PV {\n  static map(array, f) {\n    const o = Object.of(null)\n    return f ? array.map((d, i) => {\n      o.index = i;\n      return f.call(o, d);\n    }) : array.slice();\n  }\n\n  static naturalOrder(a, b) {\n    return (a < b) ? -1 : ((a > b) ? 1 : 0);\n  }\n\n  static sum(array, f) {\n    const o = Object.of(null)\n    return array.reduce(f ? (p, d, i) => {\n      o.index = i;\n      return p + f.call(o, d);\n    } : (p, d) => p + d, 0);\n  }\n\n  static max(array, f) {\n    return Math.max.apply(null, f ? PV.map(array, f) : array);\n  }\n}\n\nclass PQueue {\n  constructor(comparator) {\n    this.comparator = comparator;\n    this.contents = [];\n    this.sorted = false;\n  }\n\n  sort() {\n    this.contents.sort(this.comparator);\n    this.sorted = true;\n  }\n\n  push(o) {\n    this.contents.push(o);\n    this.sorted = false;\n  }\n\n  peek(index) {\n    if (!this.sorted) this.sort();\n    if (index === undefined) {\n      index = this.contents.length - 1;\n    }\n\n    return this.contents[index];\n  }\n\n  pop() {\n    if (!this.sorted) this.sort();\n    return this.contents.pop();\n  }\n\n  size() {\n    return this.contents.length;\n  }\n\n  map(f) {\n    return this.contents.map(f);\n  }\n\n  debug() {\n    if (!this.sorted) this.sort();\n    return this.contents;\n  }\n}\n\nclass VBox {\n  constructor(r1, r2, g1, g2, b1, b2, histo) {\n    this.r1 = r1;\n    this.r2 = r2;\n    this.g1 = g1;\n    this.g2 = g2;\n    this.b1 = b1;\n    this.b2 = b2;\n    this.histo = histo;\n  }\n\n  volume(force) {\n    if (!this._volume || force) {\n      this._volume = (\n        (this.r2 - this.r1 + 1) *\n        (this.g2 - this.g1 + 1) *\n        (this.b2 - this.b1 + 1)\n      );\n    }\n\n    return this._volume;\n  }\n\n  count(force) {\n    if (!this._count_set || force) {\n      let npix = 0;\n      let i;\n      let j;\n      let k;\n      let index;\n\n      for (i = this.r1; i <= this.r2; i++) {\n        for (j = this.g1; j <= this.g2; j++) {\n          for (k = this.b1; k <= this.b2; k++) {\n            index = getColorIndex(i, j, k);\n            npix += (this.histo[index] || 0);\n          }\n        }\n      }\n    \n      this._count = npix;\n      this._count_set = true;\n    }\n\n    return this._count;\n  }\n\n  copy() {\n    return new VBox(\n      this.r1, this.r2,\n      this.g1, this.g2,\n      this.b1, this.b2,\n      this.histo\n    )\n  }\n\n  avg(force) {\n    if (!this._avg || force) {\n      let ntot = 0;\n      const mult = 1 << (8 - sigbits);\n      let rsum = 0;\n      let gsum = 0;\n      let bsum = 0;\n      let hval;\n      let i;\n      let j;\n      let k;\n      let histoindex;\n\n      for (i = this.r1; i <= this.r2; i++) {\n        for (j = this.g1; j <= this.g2; j++) {\n          for (k = this.b1; k <= this.b2; k++) {\n            histoindex = getColorIndex(i, j, k);\n            hval = this.histo[histoindex] || 0;\n            ntot += hval;\n            rsum += (hval * (i + 0.5) * mult);\n            gsum += (hval * (j + 0.5) * mult);\n            bsum += (hval * (k + 0.5) * mult);\n          }\n        }\n      }\n\n      if (ntot) {\n        this._avg = [\n          ~~(rsum / ntot),\n          ~~(gsum / ntot),\n          ~~(bsum / ntot)\n        ];\n      } else {\n        this._avg = [\n          ~(mult * (this.r1 + this.r2 + 1) / 2),\n          ~~(mult * (this.g1 + this.g2 + 1) / 2),\n          ~~(mult * (this.b1 + this.b2 + 1) / 2)\n        ];\n      }\n    }\n\n    return this._avg;\n  }\n\n  contains(pixel) {\n    let gval;\n    let bval;\n\n    const rval = pixel[0] >> rshift;\n\n    gval = pixel[1] >> rshift;\n    bval = pixel[2] >> rshift;\n\n    return (\n      rval >= this.r1\n      && rval <= this.r2\n      && gval >= this.g1\n      && gval <= this.g2\n      && bval >= this.b1\n      && bval <= this.b2\n    );\n  }\n}\n\nclass CMap {\n  constructor() {\n    this.vboxes = new PQueue((vbox1, vbox2) => PV\n      .naturalOrder(\n        vbox1.count() * vbox1.volume(),\n        vbox2.count() * vbox2.volume()\n      ));\n  }\n\n  push(vbox) {\n    this.vboxes.push({\n      vbox,\n      color: vbox.avg()\n    })\n  }\n\n  palette() {\n    return this.vboxes.map(({\n      color\n    }) => color);\n  }\n\n  size() {\n    return this.vboxes.size();\n  }\n\n  map(color) {\n    for (let i = 0; i < this.vboxes.size(); i++) {\n      if (this.vboxes.peek(i).vbox.contains(color)) {\n        return this.vboxes.peek(i).color;\n      }\n    }\n\n    return this.nearest(color);\n  }\n\n  nearest(color) {\n    let d1;\n    let d2;\n    let pColor;\n\n    for (let i = 0; i < this.vboxes.size(); i++) {\n      d2 = Math.sqrt(\n        (color[0] - this.vboxes.peek(i).color[0]) ** 2 +\n        (color[1] - this.vboxes.peek(i).color[1]) ** 2 +\n        (color[2] - this.vboxes.peek(i).color[2]) ** 2\n      );\n      if (d2 < d1 || d1 === undefined) {\n        d1 = d2;\n        pColor = this.vboxes.peek(i).color;\n      }\n    }\n\n    return pColor;\n  }\n\n  forcebw() {\n    this.vboxes.sort(({\n      color1\n    }, {\n      color2\n    }) => PV.naturalOrder(\n      PV.sum(color1),\n      PV.sum(color2)\n    ));\n\n    const lowest = this.vboxes[0].color;\n\n    if (lowest[0] < 5 && lowest[1] < 5 && lowest[2] < 5) {\n      this.vboxes[0].color = [0, 0, 0];\n    }\n\n    const idx = this.vboxes.length - 1;\n    const highest = this.vboxes[idx].color;\n\n    if (highest[0] > 251 && highest[1] > 251 && highest[2] > 251) {\n      this.vboxes[idx].color = [255, 255, 255];\n    }\n  }\n}\n\nconst getHisto = (pixels) => {\n  const histosize = 1 << (3 * sigbits);\n  const histo = new Array(histosize);\n  let index;\n  let rval;\n  let gval;\n  let bval;\n\n  pixels.forEach(pixel => {\n    rval = pixel[0] >> rshift;\n    gval = pixel[1] >> rshift;\n    bval = pixel[2] >> rshift;\n    index = getColorIndex(rval, gval, bval);\n    histo[index] = (histo[index] || 0) + 1;\n  });\n\n  return histo;\n}\n\nconst vboxFromPixels = (pixels, histo) => {\n  let rmin = 1000000;\n  let rmax = 0;\n  let gmin = 1000000;\n  let gmax = 0;\n  let bmin = 1000000;\n  let bmax = 0;\n  let rval;\n  let gval;\n  let bval;\n\n  pixels.forEach(pixel => {\n    rval = pixel[0] >> rshift;\n    gval = pixel[1] >> rshift;\n    bval = pixel[2] >> rshift;\n    if (rval < rmin) rmin = rval;\n    else if (rval > rmax) rmax = rval;\n    if (gval < gmin) gmin = gval;\n    else if (gval > gmax) gmax = gval;\n    if (bval < bmin) bmin = bval;\n    else if (bval > bmax) bmax = bval;\n  });\n\n  return new VBox(rmin, rmax, gmin, gmax, bmin, bmax, histo);\n}\n\nconst medianCutApply = (histo, vbox) => {\n  if (!vbox.count()) return;\n\n  const rw = vbox.r2 - vbox.r1 + 1;\n  const gw = vbox.g2 - vbox.g1 + 1;\n  const bw = vbox.b2 - vbox.b1 + 1;\n  const maxw = PV.max([rw, gw, bw]);\n\n  if (vbox.count() === 1) return [vbox.copy()]\n\n  let total = 0;\n\n  const partialsum = [];\n  const lookaheadsum = [];\n  let i;\n  let j;\n  let k;\n  let sum;\n  let index;\n\n  if (maxw === rw) {\n    for (i = vbox.r1; i <= vbox.r2; i++) {\n      sum = 0;\n      for (j = vbox.g1; j <= vbox.g2; j++) {\n        for (k = vbox.b1; k <= vbox.b2; k++) {\n          index = getColorIndex(i, j, k);\n          sum += (histo[index] || 0);\n        }\n      }\n      total += sum;\n      partialsum[i] = total;\n    }\n  } else if (maxw === gw) {\n    for (i = vbox.g1; i <= vbox.g2; i++) {\n      sum = 0;\n      for (j = vbox.r1; j <= vbox.r2; j++) {\n        for (k = vbox.b1; k <= vbox.b2; k++) {\n          index = getColorIndex(j, i, k);\n          sum += (histo[index] || 0);\n        }\n      }\n      total += sum;\n      partialsum[i] = total;\n    }\n  } else {\n    for (i = vbox.b1; i <= vbox.b2; i++) {\n      sum = 0;\n      for (j = vbox.r1; j <= vbox.r2; j++) {\n        for (k = vbox.g1; k <= vbox.g2; k++) {\n          index = getColorIndex(j, k, i);\n          sum += (histo[index] || 0);\n        }\n      }\n      total += sum;\n      partialsum[i] = total;\n    }\n  }\n\n  partialsum.forEach((d, i) => {\n    lookaheadsum[i] = total - d\n  });\n\n  const doCut = (color) => {\n    const dim1 = `${color}1`;\n    const dim2 = `${color}2`;\n    let left;\n    let right;\n    let vbox1;\n    let vbox2;\n    let d2;\n    let count2 = 0;\n\n    for (i = vbox[dim1]; i <= vbox[dim2]; i++) {\n      if (partialsum[i] > total / 2) {\n        vbox1 = vbox.copy();\n        vbox2 = vbox.copy();\n\n        left = i - vbox[dim1];\n        right = vbox[dim2] - i;\n        \n        if (left <= right) {\n          d2 = Math.min(vbox[dim2] - 1, ~~(i + right / 2));\n        } else {\n          d2 = Math.max(vbox[dim1], ~~(i - 1 - left / 2));\n        }\n\n        while (!partialsum[d2]) d2++;\n        count2 = lookaheadsum[d2];\n        while (!count2 && partialsum[d2 - 1]) count2 = lookaheadsum[--d2];\n        vbox1[dim2] = d2;\n        vbox2[dim1] = vbox1[dim2] + 1;\n        return [vbox1, vbox2];\n      }\n    }\n  }\n\n  return (maxw === rw)\n    ? doCut('r')\n    : (maxw === gw)\n      ? doCut('g')\n      : doCut('b')\n}\n\nconst quantize = (pixels, maxcolors) => {\n  if (!pixels.length || maxcolors < 2 || maxcolors > 256) {\n    return false;\n  }\n\n  const histo = getHisto(pixels);\n  \n  let nColors = 0;\n  histo.forEach(() => nColors++);\n\n  if (nColors <= maxcolors) {\n\n  }\n\n  const pq = new PQueue((a, b) => PV.naturalOrder(a.count(), b.count()));\n  pq.push(vboxFromPixels(pixels, histo));\n\n  const iter = (lh, target) => {\n    let ncolors = 1;\n    let niters = 0;\n    let vbox;\n\n    while (niters < maxIterations) {\n      vbox = lh.pop();\n      if (!vbox.count()) {\n        lh.push(vbox);\n        niters++;\n        continue;\n      }\n\n      const vboxes = medianCutApply(histo, vbox);\n\n      const vbox1 = vboxes[0];\n      const vbox2 = vboxes[1];\n\n      if (!vbox1) {\n        return;\n      }\n\n      lh.push(vbox1);\n\n      if (vbox2) {\n        lh.push(vbox2);\n        ncolors++;\n      }\n\n      if (ncolors >= target) return;\n\n      if (niters++ > maxIterations) {\n        return;\n      }\n    }\n  }\n\n  iter(pq, fractByPopulations * maxcolors);\n\n  const pq2 = new PQueue((a, b) => PV.naturalOrder(\n    a.count() * a.volume(),\n    b.count() * b.volume()\n  ));\n\n  while (pq.size()) {\n    pq2.push(pq.pop());\n  }\n\n  iter(pq2, maxcolors - pq2.size());\n\n  const cmap = new CMap();\n\n  while (pq2.size()) {\n    cmap.push(pq2.pop());\n  }\n\n  return cmap;\n}\n\n\nclass Swatch {\n  constructor(rgb, population) {\n    this.hsl = undefined\n    this.yiq = 0\n    this.rgb = rgb;\n    this.population = population;\n  }\n  \n  getHsl() {\n    if (!this.hsl) {\n      return this.hsl = Dynamic.rgbToHsl(this.rgb[0], this.rgb[1], this.rgb[2]);\n    } else {\n      return this.hsl;\n    }\n  }\n\n  getPopulation() {\n    return this.population;\n  }\n\n  getRgb() {\n    return this.rgb;\n  }\n\n  getHex() {\n    return `#${((1 << 24) + (this.rgb[0] << 16) + (this.rgb[1] << 8) + this.rgb[2]).toString(16).slice(1, 7)}`;\n  }\n\n  getTitleTextColor() {\n    this._ensureTextColors();\n    if (this.yiq < 200) {\n      return \"#fff\";\n    } else {\n      return \"#000\";\n    }\n  }\n\n  getBodyTextColor() {\n    this._ensureTextColors();\n    if (this.yiq < 150) {\n      return \"#fff\";\n    } else {\n      return \"#000\";\n    }\n  }\n\n  _ensureTextColors() {\n    if (!this.yiq) {\n      return this.yiq = ((this.rgb[0] * 299) + (this.rgb[1] * 587) + (this.rgb[2] * 114)) / 1000;\n    }\n  }\n}\n\nclass CanvasImage {\n  constructor(image) {\n    this.canvas = document.createElement('canvas');\n    this.context = this.canvas.getContext('2d');\n\n    document.body.appendChild(this.canvas);\n\n    this.width = (this.canvas.width = image.width);\n    this.height = (this.canvas.height = image.height);\n    \n    this.context.drawImage(image, 0, 0, this.width, this.height);\n  }\n\n  clear() {\n    return this.context.clearRect(0, 0, this.width, this.height);\n  }\n\n  update(imageData) {\n    return this.context.putImageData(imageData, 0, 0);\n  }\n\n  getPixelCount() {\n    return this.width * this.height\n  }\n\n  getImageData() {\n    return this.context.getImageData(0, 0, this.width, this.height)\n  }\n\n  removeCanvas() {\n    return this.canvas.parentNode.removeChild(this.canvas)\n  }\n}\n\n\nclass Dynamic {\n  constructor(sourceImage, colorCount, quality) {\n    this.TARGET_DARK_LUMA = 0.26;\n    this.MAX_DARK_LUMA = 0.45;\n    this.MIN_LIGHT_LUMA = 0.55;\n    this.TARGET_LIGHT_LUMA = 0.74;\n\n    this.MIN_NORMAL_LUMA = 0.3;\n    this.TARGET_NORMAL_LUMA = 0.5;\n    this.MAX_NORMAL_LUMA = 0.7;\n\n    this.TARGET_MUTED_SATURATION = 0.3;\n    this.MAX_MUTED_SATURATION = 0.4;\n\n    this.TARGET_VIBRANT_SATURATION = 1;\n    this.MIN_VIBRANT_SATURATION = 0.35;\n\n    this.WEIGHT_SATURATION = 3;\n    this.WEIGHT_LUMA = 6;\n    this.WEIGHT_POPULATION = 1;\n\n    this.DynamicSwatch = undefined;\n    this.MutedSwatch = undefined;\n    this.DarkDynamicSwatch = undefined;\n    this.DarkMutedSwatch = undefined;\n    this.LightDynamicSwatch = undefined;\n    this.LightMutedSwatch = undefined;\n\n    this.HighestPopulation = 0;\n\n    if (typeof colorCount === 'undefined') colorCount = 64;\n    if (typeof quality === 'undefined') quality = 5;\n    \n    const image = new CanvasImage(sourceImage);\n\n    try {\n      const imageData = image.getImageData();\n      const pixels = imageData.data;\n      const pixelCount = image.getPixelCount();\n\n      const allPixels = [];\n      let i = 0;\n      while (i < pixelCount) {\n        const offset = i * 4;\n        const r = pixels[offset + 0];\n        const g = pixels[offset + 1];\n        const b = pixels[offset + 2];\n        const a = pixels[offset + 3];\n\n        if (a >= 125) {\n          if (!((r > 250) && (g > 250) && (b > 250))) {\n            allPixels.push([r, g, b]);\n          }\n        }\n\n        i = i + quality;\n      }\n\n      const cmap = quantize(allPixels, colorCount);\n      this._swatches = cmap.vboxes.map(vbox => new Swatch(vbox.color, vbox.vbox.count()));\n      this.maxPopulation = this.findMaxPopulation;\n      this.generateVarationColors();\n      this.generateEmptySwatches();\n    } finally {\n      image.removeCanvas();\n    }\n  }\n\n  generateVarationColors() {\n    this.DynamicSwatch = this.findColorVariation(\n      this.TARGET_NORMAL_LUMA,\n      this.MIN_NORMAL_LUMA,\n      this.MAX_NORMAL_LUMA,\n      this.TARGET_VIBRANT_SATURATION,\n      this.MIN_VIBRANT_SATURATION,\n      1\n    );\n\n    this.LightDynamicSwatch = this.findColorVariation(\n      this.TARGET_LIGHT_LUMA,\n      this.MIN_LIGHT_LUMA,\n      1,\n      this.TARGET_VIBRANT_SATURATION,\n      this.MIN_VIBRANT_SATURATION,\n      1\n    );\n\n    this.DarkDynamicSwatch = this.findColorVariation(\n      this.TARGET_DARK_LUMA,\n      0,\n      this.MAX_DARK_LUMA,\n      this.TARGET_VIBRANT_SATURATION,\n      this.MIN_VIBRANT_SATURATION,\n      1\n    );\n    \n    this.MutedSwatch = this.findColorVariation(\n      this.TARGET_NORMAL_LUMA,\n      this.MIN_NORMAL_LUMA,\n      this.MAX_NORMAL_LUMA,\n      this.TARGET_MUTED_SATURATION,\n      0,\n      this.MAX_MUTED_SATURATION\n    );\n    \n    this.LightMutedSwatch = this.findColorVariation(\n      this.TARGET_LIGHT_LUMA,\n      this.MIN_LIGHT_LUMA,\n      1,\n      this.TARGET_MUTED_SATURATION,\n      0,\n      this.MAX_MUTED_SATURATION\n    );\n\n    return this.DarkMutedSwatch = this.findColorVariation(\n      this.TARGET_DARK_LUMA,\n      0,\n      this.MAX_DARK_LUMA,\n      this.TARGET_MUTED_SATURATION,\n      0,\n      this.MAX_MUTED_SATURATION\n    );\n  }\n\n  generateEmptySwatches() {\n    let hsl;\n    if (this.DynamicSwatch === undefined) {\n      if (this.DarkDynamicSwatch !== undefined) {\n        hsl = this.DarkDynamicSwatch.getHsl();\n        hsl[2] = this.TARGET_NORMAL_LUMA;\n        this.DynamicSwatch = new Swatch(Dynamic.hslToRgb(hsl[0], hsl[1], hsl[2]), 0);\n      }\n    }\n\n    if (this.DarkDynamicSwatch === undefined) {\n      if (this.DynamicSwatch !== undefined) {\n        hsl = this.DynamicSwatch.getHsl();\n        hsl[2] = this.TARGET_DARK_LUMA;\n        return this.DarkDynamicSwatch = new Swatch(Dynamic.hslToRgb(hsl[0], hsl[1], hsl[2]), 0);\n      }\n    }\n  }\n\n  findMaxPopulation() {\n    let population = 0;\n\n    for (let swatch of Array.from(this._swatches)) {\n      population = Math.max(population, swatch.getPopulation());\n    }\n\n    return population;\n  }\n\n  findColorVariation(targetLuma, minLuma, maxLuma, targetSaturation, minSaturation, maxSaturation) {\n    let max = undefined;\n    let maxValue = 0;\n\n    for (let swatch of Array.from(this._swatches)) {\n      const sat = swatch.getHsl()[1];\n      const luma = swatch.getHsl()[2];\n\n      if ((sat >= minSaturation) && (sat <= maxSaturation) &&\n        (luma >= minLuma) && (luma <= maxLuma) &&\n        !this.isAlreadySelected(swatch)) {\n        const value = this.createComparisonValue(sat, targetSaturation, luma, targetLuma,\n          swatch.getPopulation(), this.HighestPopulation);\n        if ((max === undefined) || (value > maxValue)) {\n          max = swatch;\n          maxValue = value;\n        }\n      }\n    }\n\n    return max;\n  }\n\n  createComparisonValue(saturation, targetSaturation, luma, targetLuma, population, maxPopulation) {\n    return this.weightedMean(\n      this.invertDiff(saturation, targetSaturation), this.WEIGHT_SATURATION,\n      this.invertDiff(luma, targetLuma), this.WEIGHT_LUMA,\n      population / maxPopulation, this.WEIGHT_POPULATION\n    );\n  }\n\n  invertDiff(value, targetValue) {\n    return 1 - Math.abs(value - targetValue);\n  }\n\n  weightedMean(...values) {\n    let sum = 0;\n    let sumWeight = 0;\n    let i = 0;\n    while (i < values.length) {\n      const value = values[i];\n      const weight = values[i + 1];\n      sum += value * weight;\n      sumWeight += weight;\n      i += 2;\n    }\n    return sum / sumWeight;\n  }\n\n  swatches() {\n    return Object.entries({\n      vibrant: this.DynamicSwatch,\n      muted: this.MutedSwatch,\n      darkDynamic: this.DarkDynamicSwatch,\n      darkMuted: this.DarkMutedSwatch,\n      lightDynamic: this.LightDynamicSwatch,\n      lightMuted: this.LightMuted\n    })\n    .filter(([name, value]) => ((value !== null) && (value !== undefined)))\n    .map(([name, value]) => [name, value])\n  }\n\n\n  isAlreadySelected(swatch) {\n    return (this.DynamicSwatch === swatch) || (this.DarkDynamicSwatch === swatch) ||\n      (this.LightDynamicSwatch === swatch) || (this.MutedSwatch === swatch) ||\n      (this.DarkMutedSwatch === swatch) || (this.LightMutedSwatch === swatch);\n  }\n\n  static rgbToHsl(r, g, b) {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n\n    let h = undefined;\n    let s = undefined;\n\n    const l = (max + min) / 2;\n\n    if (max === min) {\n      h = (s = 0);\n    } else {\n      const d = max - min;\n\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n      switch (max) {\n        case r: h = ((g - b) / d) + (g < b ? 6 : 0); break;\n        case g: h = ((b - r) / d) + 2; break;\n        case b: h = ((r - g) / d) + 4; break;\n        default: break;\n      }\n\n      h /= 6;\n    }\n\n    return [h, s, l];\n  }\n\n  static hslToRgb(h, s, l) {\n    let r = undefined;\n    let g = undefined;\n    let b = undefined;\n\n    const hue2rgb = (p, q, t) => {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < (1 / 6)) return p + ((q - p) * 6 * t);\n      if (t < (1 / 2)) return q;\n      if (t < (2 / 3)) return p + ((q - p) * ((2 / 3) - t) * 6);\n\n      return p;\n    };\n\n    if (s === 0) {\n      r = (g = (b = l));\n    } else {\n      const q = l < 0.5 ? l * (1 + s) : (l + s) - (l * s);\n      const p = (2 * l) - q;\n      r = hue2rgb(p, q, h + (1 / 3));\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - (1 / 3));\n    }\n\n    return [\n      r * 255,\n      g * 255,\n      b * 255\n    ];\n  }\n};\n\nexport default class extends React.Component {\n  state = {\n    swatches: undefined\n  }\n\n  componentDidMount() {\n    const src = this.props.image\n    this._originalSrc = src;\n    this._img = new Image();\n    this._img.onload = this.onload;\n    this._img.onerror = this.onerror;\n    this._img.crossOrigin = true;\n    this._img.src = src;\n  }\n\n  onerror = () => {}\n  \n  onload = () => {\n    const vibrant = new Dynamic(this._img);\n    const swatches = vibrant.swatches();\n\n    this.setState({\n      swatches\n    })\n  }\n\n  render() {\n    const {render, children, image} = this.props\n    const {swatches} = this.state\n\n    return (\n      <React.Fragment>\n        {((typeof children === 'function') && swatches)\n          ? children\n            ? children({swatches, image})\n            : children\n          : render\n            ? render({swatches, image})\n            : render\n        }\n      </React.Fragment>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(({status, headers}) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        status === 404 ||\n        !headers.get('content-type').includes('javascript')\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport Prominent from './Prominent';\n\nimport './App.css';\n\nconst image = 'https://images.unsplash.com/photo-1540456348453-e29a1b8555b8?auto=format&fit=crop&w=800&q=80'\n\nexport default () => (\n  <Prominent image={image}>\n    {({swatches, image}) => {\n\n      const colors = [...swatches].map(([name, swatch]) => swatch.getHex());\n\n      return (\n        <div className=\"App\">\n\n          <div className=\"App-color\" style={{\n            backgroundImage: `radial-gradient(farthest-corner at 40px 40px, ${colors[1]} 0%, ${colors[0]} 100%)`\n          }}>\n            <img src={image} className=\"App-logo\" alt=\"\" />\n            <h1>Gradient</h1>\n            <p>Extract prominent colors from an image.</p>\n          </div>\n      \n          <header className=\"App-header\">\n            {[...swatches].map(([name, swatch], index) => (\n              <div className=\"App-color\" key={index} style={{backgroundColor: swatch.getHex()}}>\n                <img src={image} className=\"App-logo\" alt=\"\" />\n\n                <h1 style={{color: swatch.getTitleTextColor()}}>\n                  {name}\n                </h1>\n\n                <p style={{color: swatch.getBodyTextColor()}}>\n                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                </p>\n              </div>\n            ))}\n          </header>\n\n        </div>\n      )\n    }}\n  </Prominent>\n);\n"],"sourceRoot":""}